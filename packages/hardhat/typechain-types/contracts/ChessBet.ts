/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace ChessBet {
  export type GameStruct = {
    player1: PromiseOrValue<string>;
    player2: PromiseOrValue<string>;
    betAmount: PromiseOrValue<BigNumberish>;
    lichessGameId: PromiseOrValue<string>;
    isComplete: PromiseOrValue<boolean>;
    winner: PromiseOrValue<string>;
  };

  export type GameStructOutput = [
    string,
    string,
    BigNumber,
    string,
    boolean,
    string
  ] & {
    player1: string;
    player2: string;
    betAmount: BigNumber;
    lichessGameId: string;
    isComplete: boolean;
    winner: string;
  };
}

export interface ChessBetInterface extends utils.Interface {
  functions: {
    "completeGame(string,address)": FunctionFragment;
    "createGame(string,uint256)": FunctionFragment;
    "games(string)": FunctionFragment;
    "getGame(string)": FunctionFragment;
    "getPlayerGames(address)": FunctionFragment;
    "joinGame(string)": FunctionFragment;
    "playerGames(address,uint256)": FunctionFragment;
    "token()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "completeGame"
      | "createGame"
      | "games"
      | "getGame"
      | "getPlayerGames"
      | "joinGame"
      | "playerGames"
      | "token"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "completeGame",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createGame",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "games",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGame",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerGames",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "joinGame",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "playerGames",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "completeGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerGames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerGames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;

  events: {
    "GameComplete(string,address,uint256)": EventFragment;
    "GameCreated(string,address,uint256)": EventFragment;
    "GameJoined(string,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GameComplete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameJoined"): EventFragment;
}

export interface GameCompleteEventObject {
  lichessGameId: string;
  winner: string;
  prizeAmount: BigNumber;
}
export type GameCompleteEvent = TypedEvent<
  [string, string, BigNumber],
  GameCompleteEventObject
>;

export type GameCompleteEventFilter = TypedEventFilter<GameCompleteEvent>;

export interface GameCreatedEventObject {
  lichessGameId: string;
  player1: string;
  betAmount: BigNumber;
}
export type GameCreatedEvent = TypedEvent<
  [string, string, BigNumber],
  GameCreatedEventObject
>;

export type GameCreatedEventFilter = TypedEventFilter<GameCreatedEvent>;

export interface GameJoinedEventObject {
  lichessGameId: string;
  player2: string;
}
export type GameJoinedEvent = TypedEvent<
  [string, string],
  GameJoinedEventObject
>;

export type GameJoinedEventFilter = TypedEventFilter<GameJoinedEvent>;

export interface ChessBet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChessBetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    completeGame(
      lichessGameId: PromiseOrValue<string>,
      winner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createGame(
      lichessGameId: PromiseOrValue<string>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    games(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string, boolean, string] & {
        player1: string;
        player2: string;
        betAmount: BigNumber;
        lichessGameId: string;
        isComplete: boolean;
        winner: string;
      }
    >;

    getGame(
      lichessGameId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ChessBet.GameStructOutput]>;

    getPlayerGames(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    joinGame(
      lichessGameId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    playerGames(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;
  };

  completeGame(
    lichessGameId: PromiseOrValue<string>,
    winner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createGame(
    lichessGameId: PromiseOrValue<string>,
    betAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  games(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, string, boolean, string] & {
      player1: string;
      player2: string;
      betAmount: BigNumber;
      lichessGameId: string;
      isComplete: boolean;
      winner: string;
    }
  >;

  getGame(
    lichessGameId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ChessBet.GameStructOutput>;

  getPlayerGames(
    player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  joinGame(
    lichessGameId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  playerGames(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    completeGame(
      lichessGameId: PromiseOrValue<string>,
      winner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createGame(
      lichessGameId: PromiseOrValue<string>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    games(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string, boolean, string] & {
        player1: string;
        player2: string;
        betAmount: BigNumber;
        lichessGameId: string;
        isComplete: boolean;
        winner: string;
      }
    >;

    getGame(
      lichessGameId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ChessBet.GameStructOutput>;

    getPlayerGames(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    joinGame(
      lichessGameId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    playerGames(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "GameComplete(string,address,uint256)"(
      lichessGameId?: null,
      winner?: null,
      prizeAmount?: null
    ): GameCompleteEventFilter;
    GameComplete(
      lichessGameId?: null,
      winner?: null,
      prizeAmount?: null
    ): GameCompleteEventFilter;

    "GameCreated(string,address,uint256)"(
      lichessGameId?: null,
      player1?: null,
      betAmount?: null
    ): GameCreatedEventFilter;
    GameCreated(
      lichessGameId?: null,
      player1?: null,
      betAmount?: null
    ): GameCreatedEventFilter;

    "GameJoined(string,address)"(
      lichessGameId?: null,
      player2?: null
    ): GameJoinedEventFilter;
    GameJoined(lichessGameId?: null, player2?: null): GameJoinedEventFilter;
  };

  estimateGas: {
    completeGame(
      lichessGameId: PromiseOrValue<string>,
      winner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createGame(
      lichessGameId: PromiseOrValue<string>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    games(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGame(
      lichessGameId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerGames(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinGame(
      lichessGameId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    playerGames(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    completeGame(
      lichessGameId: PromiseOrValue<string>,
      winner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createGame(
      lichessGameId: PromiseOrValue<string>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    games(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGame(
      lichessGameId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerGames(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinGame(
      lichessGameId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    playerGames(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
